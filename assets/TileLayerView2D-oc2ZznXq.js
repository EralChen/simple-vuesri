import{cR as w,eY as y,cS as I,eZ as V,e_ as H,e$ as v,f0 as T,cT as q,aN as S,bl as U,aE as n,f1 as g,n as b,E as o,F as m,H as C}from"./index-VvDgqKaS.js";import"./BufferPool-N_XVL8Wp.js";import"./MagnifierPrograms-5Rpd_UmH.js";import{r as Q}from"./GraphicsView2D-pXdAWAd4.js";import"./AttributeStoreView-OR45S_Lz.js";import{r as F,o as f,n as d}from"./imageUtils-xvihhH52.js";import{a as P}from"./HighlightGraphicContainer-dY8KvyRF.js";import{S as k,G}from"./MapServiceLayerViewHelper-2SCgTVso.js";import"./cimAnalyzer-MIAdrVOL.js";import"./BidiEngine-8z8MVveq.js";import"./labelPoint-1wm0QAjd.js";import"./Rect-pT1ASav_.js";import"./Rasterizer-So7ShSqV.js";import"./rasterizingUtils-XDirziwC.js";import"./imageutils-ma6bEPfd.js";import"./Matcher-OkHPX9cs.js";import"./visualVariablesUtils-sspFl1_n.js";import"./tileUtils-pcBJnprf.js";import"./TurboLine-zZFZrrgO.js";import"./ExpandedCIM-OcW5nORE.js";import"./CircularArray-1_thnT0U.js";import"./throttle-SZpAiZ7F.js";import"./ComputedAttributeStorage-SjfM3jYM.js";import"./TimeOnly-4P0SSB7S.js";import"./normalizeUtilsSync-qycEtZ1a.js";import"./projectionSupport-JvjEZUGs.js";import"./json-v6EOeNTY.js";import"./util-nR5wxBXD.js";import"./BitmapTileContainer-RuhBkJ6P.js";import"./TileContainer-y8lH0oYw.js";import"./BaseGraphicContainer-FvgeT5aQ.js";import"./FeatureContainer-tJ3YTVuM.js";const L=[0,0];let a=class extends w(F(y(I))){constructor(){super(...arguments),this._fetchQueue=null,this._highlightGraphics=new V,this._highlightView=null,this._popupHighlightHelper=null,this._tileStrategy=null,this.layer=null}get resampling(){return!("resampling"in this.layer)||this.layer.resampling!==!1}get tilemapCache(){return"tilemapCache"in this.layer?this.layer.tilemapCache:null}update(e){var t;this._fetchQueue.pause(),this._fetchQueue.state=e.state,this._tileStrategy.update(e),this._fetchQueue.resume(),(t=this._highlightView)==null||t.processUpdate(e)}attach(){const e="tileServers"in this.layer?this.layer.tileServers:null,t=this.tilemapCache;if(this._tileInfoView=new H(this.layer.tileInfo,this.layer.fullExtent,t==null?void 0:t.effectiveMinLOD,t==null?void 0:t.effectiveMaxLOD),this._fetchQueue=new v({tileInfoView:this._tileInfoView,concurrency:e&&10*e.length||10,process:(i,s)=>this.fetchTile(i,s)}),this._tileStrategy=new T({cachePolicy:"keep",resampling:this.resampling,acquireTile:i=>this.acquireTile(i),releaseTile:i=>this.releaseTile(i),tileInfoView:this._tileInfoView}),k(this,this.layer)){const i=this._highlightView=new Q({view:this.view,graphics:this._highlightGraphics,requestUpdateCallback:()=>this.requestUpdate(),container:new P(this.view.featuresTilingScheme),defaultPointSymbolEnabled:!1});this.container.addChild(this._highlightView.container),this._popupHighlightHelper=new G({createFetchPopupFeaturesQueryGeometry:(s,h)=>q(s,h,this.view),highlightGraphics:this._highlightGraphics,highlightGraphicUpdated:(s,h)=>{i.graphicUpdateHandler({graphic:s,property:h})},layerView:this,updatingHandles:this._updatingHandles})}this.requestUpdate(),this.addAttachHandles(this._updatingHandles.add(()=>this.resampling,()=>{this.doRefresh()})),super.attach()}detach(){var e,t;super.detach(),this._tileStrategy.destroy(),this._fetchQueue.clear(),this.container.removeAllChildren(),(e=this._popupHighlightHelper)==null||e.destroy(),(t=this._highlightView)==null||t.destroy(),this._fetchQueue=this._tileStrategy=this._tileInfoView=this._popupHighlightHelper=null}async fetchPopupFeatures(e,t){return this._popupHighlightHelper?this._popupHighlightHelper.fetchPopupFeatures(e,t):[]}highlight(e){return this._popupHighlightHelper?this._popupHighlightHelper.highlight(e):S()}moveStart(){this.requestUpdate()}viewChange(){this.requestUpdate()}moveEnd(){this.requestUpdate()}supportsSpatialReference(e){var t;return U((t=this.layer.tileInfo)==null?void 0:t.spatialReference,e)}async doRefresh(){if(this.attached){if(this.suspended)return this._tileStrategy.clear(),void this.requestUpdate();this._fetchQueue.reset(),this._tileStrategy.refresh(e=>this._updatingHandles.addPromise(this._enqueueTileFetch(e)))}}acquireTile(e){const t=this._bitmapView.createTile(e),i=t.bitmap;return[i.x,i.y]=this._tileInfoView.getTileCoords(L,t.key),i.resolution=this._tileInfoView.getTileResolution(t.key),[i.width,i.height]=this._tileInfoView.tileInfo.size,this._updatingHandles.addPromise(this._enqueueTileFetch(t)),this._bitmapView.addChild(t),this.requestUpdate(),t}releaseTile(e){this._fetchQueue.abort(e.key.id),this._bitmapView.removeChild(e),e.once("detach",()=>e.destroy()),this.requestUpdate()}async fetchTile(e,t={}){const i=this.tilemapCache,{signal:s,resamplingLevel:h=0}=t;if(!i)try{return await this._fetchImage(e,s)}catch(r){if(!n(r)&&!this.resampling)return f(this._tileInfoView.tileInfo.size);if(h<3){const c=this._tileInfoView.getTileParentId(e.id);if(c){const u=new g(c),_=await this.fetchTile(u,{...t,resamplingLevel:h+1});return d(this._tileInfoView,_,u,e)}}throw r}const l=new g(0,0,0,0);let p;try{if(await i.fetchAvailabilityUpsample(e.level,e.row,e.col,l,{signal:s}),l.level!==e.level&&!this.resampling)return f(this._tileInfoView.tileInfo.size);p=await this._fetchImage(l,s)}catch(r){if(n(r))throw r;p=await this._fetchImage(e,s)}return this.resampling?d(this._tileInfoView,p,l,e):p}async _enqueueTileFetch(e){if(!this._fetchQueue.has(e.key.id)){try{const t=await this._fetchQueue.push(e.key);e.bitmap.source=t,e.bitmap.width=this._tileInfoView.tileInfo.size[0],e.bitmap.height=this._tileInfoView.tileInfo.size[1],e.once("attach",()=>this.requestUpdate())}catch(t){n(t)||b.getLogger(this).error(t)}this.requestUpdate()}}async _fetchImage(e,t){return this.layer.fetchImageBitmapTile(e.level,e.row,e.col,{signal:t})}};o([m()],a.prototype,"resampling",null),o([m()],a.prototype,"tilemapCache",null),a=o([C("esri.views.2d.layers.TileLayerView2D")],a);const me=a;export{me as default};

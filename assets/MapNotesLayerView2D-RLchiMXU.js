import{eY as m,cS as f,t as w,V as y,k as _,aN as c,aF as h,P as o,d6 as V,E as v,H as C}from"./index--fOyh5XL.js";import{i as g}from"./GraphicContainer-la0fWX4o.js";import{r as d}from"./GraphicsView2D-N6QPGK5-.js";import"./BaseGraphicContainer-xdFE-B6w.js";import"./FeatureContainer-gXwaXTnQ.js";import"./AttributeStoreView-xmX8Qycn.js";import"./visualVariablesUtils-Vd2fTuso.js";import"./cimAnalyzer-gy2zc7ye.js";import"./BidiEngine-8z8MVveq.js";import"./labelPoint-lHI8rp7z.js";import"./Rect-pT1ASav_.js";import"./ExpandedCIM-bd1MIo_0.js";import"./util-4ofgXPAM.js";import"./TileContainer-OcxkAdvJ.js";import"./normalizeUtilsSync-LkxxN7dk.js";import"./projectionSupport-vABirATK.js";import"./json-v6EOeNTY.js";import"./Matcher-Ee5Rw7aH.js";import"./tileUtils-pcBJnprf.js";import"./TurboLine-F9uulrrF.js";import"./ComputedAttributeStorage-b_NwiE_c.js";import"./TimeOnly-gwmTTSeT.js";const u="sublayers",p="layerView";let l=class extends m(f){constructor(){super(...arguments),this._highlightIds=new Map}async fetchPopupFeatures(i){return Array.from(this.graphicsViews(),t=>t.hitTest(i).filter(e=>!!e.popupTemplate)).flat()}*graphicsViews(){this._graphicsViewsFeatureCollectionMap==null?this._graphicsViews==null?yield*[]:yield*this._graphicsViews:yield*this._graphicsViewsFeatureCollectionMap.keys()}async hitTest(i,t){return Array.from(this.graphicsViews(),e=>{const s=e.hitTest(i);if(this._graphicsViewsFeatureCollectionMap!=null){const a=this._graphicsViewsFeatureCollectionMap.get(e);for(const r of s)!r.popupTemplate&&a.popupTemplate&&(r.popupTemplate=a.popupTemplate),r.sourceLayer=r.layer=this.layer}return s}).flat().map(e=>({type:"graphic",graphic:e,layer:this.layer,mapPoint:i}))}highlight(i){let t;typeof i=="number"?t=[i]:i instanceof w?t=[i.uid]:Array.isArray(i)&&i.length>0?t=typeof i[0]=="number"?i:i.map(s=>s&&s.uid):y.isCollection(i)&&(t=i.map(s=>s&&s.uid).toArray());const e=t==null?void 0:t.filter(_);return e!=null&&e.length?(this._addHighlight(e),c(()=>this._removeHighlight(e))):c()}update(i){for(const t of this.graphicsViews())t.processUpdate(i)}attach(){const i=this.view,t=()=>this.requestUpdate(),e=this.layer.featureCollections;if(e!=null&&e.length){this._graphicsViewsFeatureCollectionMap=new Map;for(const s of e){const a=new g(this.view.featuresTilingScheme),r=new d({view:i,graphics:s.source,renderer:s.renderer,requestUpdateCallback:t,container:a});this._graphicsViewsFeatureCollectionMap.set(r,s),this.container.addChild(r.container),this.addHandles([h(()=>s.visible,n=>r.container.visible=n,o),h(()=>r.updating,()=>this.notifyChange("updating"),o)],p)}this._updateHighlight()}else this.layer.sublayers!=null&&this.addHandles(V(()=>this.layer.sublayers,"change",()=>this._createGraphicsViews(),{onListenerAdd:()=>this._createGraphicsViews(),onListenerRemove:()=>this._destroyGraphicsViews()}),u)}detach(){this._destroyGraphicsViews(),this.removeHandles(u)}moveStart(){}moveEnd(){}viewChange(){for(const i of this.graphicsViews())i.viewChange()}isUpdating(){for(const i of this.graphicsViews())if(i.updating)return!0;return!1}_destroyGraphicsViews(){this.container.removeAllChildren(),this.removeHandles(p);for(const i of this.graphicsViews())i.destroy();this._graphicsViews=null,this._graphicsViewsFeatureCollectionMap=null}_createGraphicsViews(){if(this._destroyGraphicsViews(),this.layer.sublayers==null)return;const i=[],t=this.view,e=()=>this.requestUpdate();for(const s of this.layer.sublayers){const a=new g(this.view.featuresTilingScheme);a.fadeTransitionEnabled=!0;const r=new d({view:t,graphics:s.graphics,requestUpdateCallback:e,container:a});this.addHandles([s.on("graphic-update",r.graphicUpdateHandler),h(()=>s.visible,n=>r.container.visible=n,o),h(()=>r.updating,()=>this.notifyChange("updating"),o)],p),this.container.addChild(r.container),i.push(r)}this._graphicsViews=i,this._updateHighlight()}_addHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t);this._highlightIds.set(t,e+1)}else this._highlightIds.set(t,1);this._updateHighlight()}_removeHighlight(i){for(const t of i)if(this._highlightIds.has(t)){const e=this._highlightIds.get(t)-1;e===0?this._highlightIds.delete(t):this._highlightIds.set(t,e)}this._updateHighlight()}_updateHighlight(){const i=Array.from(this._highlightIds.keys());for(const t of this.graphicsViews())t.setHighlight(i)}};l=v([C("esri.views.2d.layers.MapNotesLayerView2D")],l);const z=l;export{z as default};
